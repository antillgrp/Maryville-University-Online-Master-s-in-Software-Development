2.1 Numeric Data Types

1.What does a data type indicate to the computer?

Computer stores values in 0s and 1s a data type dictates how those 0s and 1s are read/interpreter by el program.  Is a data storage format that can contain a specific type or range of values. Some common data types include integers, floating point numbers, characters, strings, and arrays.

2.What is a boolean value?

A boolean or bool is a data type that has two possible values: it is either true, or false. It is named after the English mathematician and logician George Boole, whose algebraic and logical systems are used in all modern digital computers.

3.What would be the result of evaluating the following expressions? (feel free to check yourself using the shell in Thonny)

int( 67.2 ) ==> 67

int( '67.2' ) ==> Traceback (most recent call last):
  File "<pyshell>", line 1, in <module>
ValueError: invalid literal for int() with base 10: '67.2'

type( 67.2 ) ==> <class 'float'>

float( 67 )

float( '67' ) ==> 67.0

round( 8.2537, 2 ) ==> 8.25

2.2 Arithmetic Expression Operators


1 What is modulo?

( '%' ) a left over of an integer division  

2 What is the difference between floating point division and integer division?

floating point division ==> ( '/' ) returns a floating point 

integer division ==> ( '//' ) returns an integer

if k = n // m  and l = n % m then  n == k * m + l  

3 What would be the result of evaluating the following expressions? (feel free to check yourself using the shell in Thonny)

2 + 3 * 4 - 6 ==> 8

14 / 7 * 2 + 30 / 5 + 1 ==> 11.0

( 12 + 6 ) / 3 * 2 ==> 12.0

(238 % 10 + 3 ) % 7 ==> 4

6 * 7 % 4 ==> 2

2 * 2 ** 3 + 4 ==> 20

138 // 5 / 3 ** 2 ==> 3.0

2.3 Using the Math Library


1. What needs to be done to use the math library in our programs?

import math  <== import math library

2. In the expression 'math.sqrt( 25 )', what is the '.' and what does it do?

dot or access operator 

3. Estimating populations is a common job when dealing with bacterial samples. Given an initial population size, LaTeX: P_0 P 0 , we can estimate the population, LaTeX: P P , at a future time, LaTeX: t t , years from now with a given growth/decay rate, LaTeX: k k . The equation to do so is LaTeX: P=P_0e^{kt} P = P 0 e k t where e is euler's number. For example, given an initial population of 10,000, a growth rate of .4, and an interest in the estimated population size 5 years from now, then the estimated population would be LaTeX: P=\left(10,000\right)e^{\left(0.4\right)\left(5\right)}=10,000e^2=73890.5609893065\:\Longrightarrow\:73890 P = ( 10 , 000 ) e ( 0.4 ) ( 5 ) = 10 , 000 e 2 = 73890.5609893065 ⟹ 73890 .

Write a program called population_estimate with three inputs: initial population, growth/decay rate, and the number of years from now we wish to estimate the population. The program should compute and then output the estimated population after the given number of years.

import math

initial_population = float(input(" initial population:"))
growth_decay_rate= float(input("growth/decay rate:"))
time = float(input("years:"))

future_population = round(initial_population * math.pow(math.e, growth_decay_rate * time), 2)

print("In %s years the population will be: %s" % (str(time), str(future_population)))

2.4 Accumulation Algorithms

1. What is the role of an accumulator variable?

A common programming “pattern” is to traverse a sequence, accumulating a value as we go, such as the sum-so-far or the maximum-so-far. This pattern of iterating the updating of a variable is commonly referred to as the accumulator pattern.

2. Using the range function, how would you create the following ranges:

[0, 1, 2, 3] ==> list( range( 4 ))
[1, 2, 3, 4] ==> list( range( 1, 5 ))
[5, 6, 7] ==> list( range( 5, 3 ))
[5, 7, 9] ==> list( range( 5, 10 , 2))
[9, 7, 5] ==> list( range( 9, 4 , -2))

Recall that you can use the list function with the range function to see the sequence generated by your call of the range function. This will let you validate your answer in Thonny's Shell, like this:

>>> list( range(3) )
[0, 1, 2]
>>> list( range(3, 6) )
[3, 4, 5] 

3. Consider the program below and try to predict what the output will be. After you make your prediction, then try it out in Thonny using the Debugger to step through the execution of the program.

ans = 10
for i in range( 5, 10 ):
    ans = ans + i * i
    print( i )
print( ans )

OUTPUT:

5
6
7
8
9
265

4. What is the algorithmic pattern used in the previous problem's program called?

accumulator pattern

5. In bowling leagues it is typical to bowl three games, total the score of all three games, and call that total the series. So if someone were to bowl scores of 150, 180, and a 175, then their series would be 150 + 180 + 175 which is 505.

Write a program called series_computer which prompts the user to enter their three games and computes the series. You should attempt to do this using the accumulator pattern (hint: your input statement should be inside the loop).

series = 0
for i in range(1, 4):
    series += int(input("Game #%i score:" % i))
print("Player's total score(series):", series)

OUTPUT:

Game #1 score:150
Game #2 score:180
Game #3 score:175
Player's total score(series): 505




