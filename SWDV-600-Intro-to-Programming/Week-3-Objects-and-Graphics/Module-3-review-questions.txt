Module 3 review questions

3.1 Numbers in Graphics

1. Imagine a point in a window on the screen. For example, a point at the (x, y) location (30, 50). If we move that point in a straight line to the right, how will the numbers representing our location change?

x increases, y won't change

2. As in the previous example, if we move that same point at (30, 50) in a straight line going down the screen, how will the numbers representing our location change?

x won't change, y increases

3. Each individual cell of color on screens is called a _pixel_, and the color is represented by numeric intensity values of _red_, _green_, and _blue_. 

3.2 Graphical Items as Objects

1. A functions that creates a new instance of a class is called an _constructor__.

2. _Data_ variables are used to store data inside an object.

3. A _action_ method changes the data store in an object.

4. Write a program called color-switcher that draws a graphics window, sets the window's background color to a color of your choice, and then waits for the mouse to be clicked. After the mouse is clicked in the window, the background color should change to another color of your choice and wait for the mouse to be clicked again. After the mouse is clicked in the window a final time, the program should end and the window should close.

from graphics import *
import random as rd

win = GraphWin('Click to see coordinates', 640, 320)
win.setBackground(color_rgb(rd.randint(0, 255), rd.randint(0, 255), rd.randint(0, 255)))
clickPoint = win.getMouse()
win.setBackground(color_rgb(rd.randint(0, 255), rd.randint(0, 255), rd.randint(0, 255)))
clickPoint = win.getMouse()

3.3 Creating and Manipulating Graphic Objects

1. When we create an object instance, like a Circle for example, and assign that to a variable, we are storing a _reference_ to that object.

2. Aliasing occurs when two variables _reference_ the same object.

3. If you want to make an exact copy of a graphical object, you need to use the _clone()_ function to get a new instance with the same values as the original object.

4. Consider the picture of a baseball diamond below:

vector-baseball-diamond-illustration.jpg

Write a program called baseball-diamond that draws the three bases as Rectangles (they do not need to be oriented as they are in the example image, their sides can be parallel to the window), home plate as a Polygon, the pitchers mound as a Circle with a similar color, and Lines for the white follow lines that run to the sides of 3rd and 1st base. Also, set the background color of the window to a nice, grassy green.

Feel free to jazz this up with any baseball diamond embellishments you think of.

Image from: https://www.vecteezy.com/free-vector/baseball-diamond

from graphics import *

win = GraphWin('Baseball field', 801, 601)
win.setBackground(color_rgb(0, 128, 58))
# infield circle
shape = Circle(Point(400, 300), 200)
shape.setFill(color_rgb(196, 153, 108))
shape.setOutline(color_rgb(0, 128, 58))
shape.draw(win)
# infield rhombus
shape = Polygon(Point(280, 300), Point(400, 170), Point(520, 300), Point(400, 420))
shape.setFill(color_rgb(18, 168, 76))
shape.setOutline(color_rgb(196, 153, 108))
shape.draw(win)
# pitcher mound
shape = Circle(Point(400, 300), 20)
shape.setFill(color_rgb(196, 153, 108))
shape.setOutline(color_rgb(196, 153, 108))
shape.draw(win)
shape = Rectangle(Point(390, 302), Point(410, 298))
shape.setFill(color_rgb(255, 255, 255))
shape.setOutline(color_rgb(255, 255, 255))
shape.draw(win)
shape = Text(Point(400, 260), "Pitcher's mound")
shape.setFill(color_rgb(255, 255, 255))
shape.draw(win)
# big foul area
shape = Polygon(Point(0, 600), Point(0, 20), Point(400, 420), Point(800, 20), Point(800, 600))
shape.setFill(color_rgb(0, 128, 58))
shape.setOutline(color_rgb(255, 255, 255))
shape.draw(win)
# small foul area
shape = Polygon(Point(160, 180), Point(400, 420), Point(640, 180), Point(640, 420), Point(160, 420))
shape.setOutline(color_rgb(255, 255, 255))
shape.setFill(color_rgb(18, 168, 76))
shape.draw(win)
# home circle
shape = Circle(Point(400, 420), 50)
shape.setFill(color_rgb(196, 153, 108))
shape.setOutline(color_rgb(255, 255, 255))
shape.draw(win)
# waiting left circle
shape = Circle(Point(280, 450), 20)
shape.setOutline(color_rgb(255, 255, 255))
shape.setFill(color_rgb(18, 168, 76))
shape.draw(win)
# waiting right circle
shape = Circle(Point(520, 450), 20)
shape.setOutline(color_rgb(255, 255, 255))
shape.setFill(color_rgb(18, 168, 76))
shape.draw(win)
# 1st base
shape = Polygon(Point(500, 300), Point(510, 290), Point(520, 300), Point(510, 310))
shape.setFill(color_rgb(255, 255, 255))
shape.setOutline(color_rgb(255, 255, 255))
shape.draw(win)
shape = Text(Point(560, 300), "1st Base")
shape.setFill(color_rgb(255, 255, 255))
shape.draw(win)
# 2nd base
# shape = Polygon(Point(280, 300), Point(400, 170), Point(520, 300), Point(400, 420))
shape = Polygon(Point(400, 170), Point(410, 180), Point(400, 190), Point(390, 180))
shape.setFill(color_rgb(255, 255, 255))
shape.setOutline(color_rgb(255, 255, 255))
shape.draw(win)
shape = Text(Point(400, 160), "2nd Base")
shape.setFill(color_rgb(255, 255, 255))
shape.draw(win)
# 3rd base
# shape = Polygon(Point(280, 300), Point(400, 170), Point(520, 300), Point(400, 420))
shape = Polygon(Point(280, 300), Point(290, 290), Point(300, 300), Point(290, 310))
shape.setFill(color_rgb(255, 255, 255))
shape.setOutline(color_rgb(255, 255, 255))
shape.draw(win)
shape = Text(Point(240, 300), "3rd Base")
shape.setFill(color_rgb(255, 255, 255))
shape.draw(win)
# Home plate
# shape = Polygon(Point(280, 300), Point(400, 170), Point(520, 300), Point(400, 420))
shape = Polygon(Point(400, 420), Point(390, 410), Point(390, 400), Point(410, 400), Point(410, 410))
shape.setFill(color_rgb(255, 255, 255))
shape.setOutline(color_rgb(255, 255, 255))
shape.draw(win)
shape = Text(Point(400, 480), "Home plate")
shape.setFill(color_rgb(255, 255, 255))
shape.draw(win)

clickPoint = win.getMouse()


