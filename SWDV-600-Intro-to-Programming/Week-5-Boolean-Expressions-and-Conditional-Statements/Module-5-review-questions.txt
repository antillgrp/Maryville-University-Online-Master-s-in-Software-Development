Module 4 review questions

5.1 Conditionally Executing Statements

1. Instructions in the body of an if statement only execute if the _______________ is ______________.

2. Translate the following conditional statements into Python conditional expressions (example: "x is greater than y" could be translated into the Python conditional expression "x > y", note the use of the ">", or greater than, relational operator:

    z is not equal to the sum of x and y
    y is at least as great as x times z
    the square root of x is less than z
    the length of sequence a is equal to the length of sequence b

3. For the conditional expressions you created in the previous values, choose two sets of values for x, y, and z such that one set would make your expression true and the other would make your expression false. For example, given the expression `x > y`, the set of values `x = 5, y = 2, z = 0` would cause the expression to evaluate to true, and `x = 5, y = 10, z = 0` would cause the expression to evaluate to false. Use these to test if your expressions are correct.

4. Write a program where a user inputs a positive integer and then it outputs if the number has only one digit or not. For example:

Enter your number: 5
This is a one digit number

Enter your number: 22
This number has more than one digit

5.2 Two-way Decisions

1. Instructions in the else clause of an if statement only execute if the _______________ is ______________.

2. Given the following if statements, provide two sets of values for x, y, and z such that one set would result in the statements in the if clause executing and the other set would result in the statements in an else clause executing.

    if z == x + y:
    if z * x >=  y:
    if len( z ) > len( y ):
    if x[y] != x[z]:

3. Write a program where a user inputs a string and then it outputs a different message if the string is greater than 10 characters long. Your program should use an else clause with an if statement. For example:

Enter your word: constructive
Maybe consider a more diminutive option?

Enter your number: embellish
Short and sweet!

5.3 Multi-way Decisions
1. The condition for an elif clause is only evaluated if the condition that preceded it evaluated to __________.

2. Consider the following conditional code segment below.

if a * 2 < b:
    a = a * 3
elif a > b:
    b = b + 3

if b < a:
    b = b + 1
else:
    a = a - 1
    print( a, b )

print("Finished!")

What would the output be for the following values if a and b?

a = 2
b = 10

a = 4
b = 3

a = 3
b = 8

3. The following code segment should print "High" if `x` is at least 200, print "Medium" if `x` is at least 100 and less than 200, and print "Low" if `x` is less than 100. However, it is not working with what should be "High" values. Fix the following code segment to work properly utilizing an else if condition.

if x >= 200:
    print("High")
if x >= 100:
    print("Medium")
if x < 100:
    print("Low")

4. The following code segment unnecessarily uses nested conditional statements. Modify the code so that it functions the same, but no longer has a nested `if` statement

if y == 20:
    print("Bullseye")
else:
    if y > 20:
        print("Greater")
    elif y == 0:
        print("Nothing")
    else:
        print("Lesser")

5. Write a program that takes as input a student's total course points (a value between 0 and 100) and prints out if they passed the course (total points of 60 or better), if they passed with honors (total points of 90 or better), if they need to retake the course (total points below 60), or if the total course points entered is not a valid value (e.g, the user inputs -20 or 276).

5.4 Translating Conditional Statements into Python

For the following problems, it is important to note that you can compare the lexicographic ordering of Strings using normal comparison operators. What does that mean? You can determine which String comes first alphabetically by comparing Strings with relational operators such as `<`, `>`, `<=`, `>=`, `==`, and `!=`.

For example, the expression `"apple" < "banana"` would evaluate to true because "apple" would come before "banana" if we sorted the words alphabetically. Similarly `"apricot" >= "banana"` would evaluate to false because "apricot" would come before "banana" alphabetically, therefore is it is not greater than "banana". One caveat is that uppercase letters such as "A" are considered less than lower case letters. Thus `"Apple" < "apple"` would evaluate to true because Python believes word with the capital letter would come first alphabetically.

1. Write a program enables a user to enter three lowercase words and then finds the word that would come first alphabetically. For example, if the user inputs the words "pear", "grape", "watermelon", the program should output that "grape" would come first alphabetically.

2. Attempt this same problem, but now structure the conditional statements as a decision tree (e.g., using nested conditional statements to reduce the number of conditions to check).

3. Again, attempt this same problem, but now structure the program to find the first word alphabetically using sequential processing (e.g., a loop that continually accepts input values while tracking what is the first word alphabetically that we have seen so far).

5.5 Exceptional Conditions

1. Why do programming languages such as Python have Exceptions?

2. Consider the following program that enables a user to input a string, then an index for a character of the string, and then outputs the character of the string at that index:

inputString = input("Enter your String: ")
characterIndex = int(input("Enter the index of the character you want: "))

character = inputString[characterIndex]
print( "The character is", character )

Give an example set of inputs that would cause this program to throw an exception.

3. Rewrite the previous program such that it will `try` and `except` an IndexError, then have the program print out "The string does not have that many characters" if an IndexError occurs.

4. Rewrite the previous program again, but this time prevent the error from ever occurring by using conditional execution (i.e., if/else statement). The program should still print out "The string does not have that many characters" if the Exception would have occurred given the input values for `inputString` and `characterIndex`.

5.6 Definite and Indefinite Loops

1. A for loop iterating over a sequence is an example of a ______________ loop.

2. An infinite loop occurs when the loop's condition, or continuation test, never evaluates to be ____________ .

3. Consider the following loops. How many times will each repeat? Recall that `infinitely` or `unknowable` are possible answers.

n = 1
while n < 10:
    print('I\'m looping!')
    n = n * 2

x = 5
while x > 1:
    print('I\'m hula-hooping!')
    x = x + 1

z = 10
while z < 10:
    print('I\'m swooping!')
    z = z - 1

y = 0
doAnother = 'y'
while doAnother == 'y':
    y += 10
    doAnother = input('Do another (y/n)? ')

5.7 Sentinel Loops

1. Consider the following program that counts words input with length less than 5 until the user types the word `quit`. It does not output the correct result. Why?

count = 0
while inputWord != 'quit':
    inputWord = input("Enter a word ('quit' to stop): ")
    if len( inputWord ) < 5:
        count = count + 1
print("You entered {0} words with less than 5 characters".format(count))

2. How would you fix the previous program to make it output the correct result?

3. How would you improve the previous program such that a user could enter the word `quit` in any case (e.g., `QuiT`) to stop the input?

4. A special value that causes a loop to terminate is called a ________ value.

5. Write a program called min-max-tracker that enables a user to enter positive numbers until they enter a negative value. After the user enters the negative value the program should output both the minimum positive value entered and the maximum positive value entered.

5.8 Validation Loops

1. The _________ statement will terminate an executing loop even if the loop's condition, or continuation test, is still evaluating to true.

2. Write a program that takes as input a student's total course points (a value between 0 and 100) and prints out if they passed the course (total points of 60 or better), if they passed with honors (total points of 90 or better), or if they need to retake the course (total points below 60).

If the total points value input by the user is not valid (i.e., points value is more than 100), then the program should repeatedly ask the user to enter a points value until a valid value is entered. You can assume the user will only input points values greater than 0.

3. Write a program that enables a user to input Strings at least 5 characters long and counts the number of Strings entered that start and end with the same character. For example "baabab" would count but "ababb" would not.

If a user enters a String that is shorter than 5 characters, then the user should receive an error message and be prompted to enter another string at least 5 characters long. If a shorter, invalid string has the same first and last character, (e.g., "abba") that should not be counted.

5.9 File Loops

1. When reading a file and we reach the end, the _______________ function will return the _______________ .

2. A CSV file is actually called a ___________  _______________  _______________ file.

3. The following program is intended to count all the lines that have more than two values separated by commas, but it has a problem. What is the problem and how would you fix it?

file = open("scores.csv", "r")
line = file.readline()
lineCount = 0
while line != "":
    tokens = line.split(",")
    if len(tokens) >= 3:
        lineCount = lineCount + 1
print("Line Count: {0}".format( lineCount ) )
file.close()

4. The data file forum_posters.csvPreview the document contains information about people's participation in an online forum. The first column is their name, second is their status (A is active in the last week, X is not active), and last is how many posts they have made in the last month. We want to find our most active posters. Write a program that will find all posters in this file that are (1) active and (2) have more than 200 posts. You should print out the details of every person meeting the criteria.

5.10 Boolean Operators for Complex Conditions

1. Given the following assignments

x = 27
y = -1
z = 32
b = False

What do the following expressions evaluate to?

    not b

    b or True

    x > y and y > z

    x == y or x <= z

    not (x % 2 == 0)

    b and not b

    b or not b

    (x < y) == b

2. Your blood pressure is normal if the systolic is between 80 and 120 and the diastolic is between 60 and 80. Write a program where a user inputs their systolic and diastolic blood pressure readings and the program tells them if their blood pressure is normal or not normal. Attempt to do this using boolean operators rather than nested if statements.

3. Write a program that enables a user to enter in three numbers and then tells the user if the numbers are consecutive. For example, if the user inputs 5, 6, and then 7, these are consecutive so the program should indicate as such. However, if the user inputs 4, 6, and then 7, these are not consecutive and the program should say so. HINT: think about using the absolute value function

4. Revisit the previous problem, and make your consecutive test work for numbers input in any order. For example, the input 6, 7, and then 5 should cause the program to report the numbers are consecutive because there exists some ordering of the numbers in which they are consecutive.


